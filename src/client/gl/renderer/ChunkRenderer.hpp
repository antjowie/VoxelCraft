#pragma once

class ChunkMesh
{
public:
    /**
     * The vao is generated by chunk renderer, it may make more sense
     * 
     */
    ChunkMesh();
    void Generate(const Chunk& chunk);

    VAO m_vao;
    Primitive::Face::Buffer m_buffer;
};

/**
 * The chunk renderer has the index buffers for chunks since this is constant
 * It also has the shader
 * TODO perhaps refactor this into the chunk itself since the renderer seems redundant
 */
class ChunkRenderer
{
public:
    ChunkRenderer();
    ~ChunkRenderer();

    void RegisterVAO(VAO& vao);

    void SetVP(const glm::mat4& vp);
    void Render(const ChunkMesh& mesh, bool updateDrawData);
    void Display();

private:
    struct Command
    {
        const ChunkMesh& chunk;
        bool upload;
    };
    std::vector<Command> m_renderQueue;

    Shader m_shader;

    const unsigned m_elementCount;
    unsigned m_ebo;
};